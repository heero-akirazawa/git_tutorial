ターミナルの頻出コマンド
ターミナルの頻出コマンドについてまとめます。
Gitにはターミナルで作業するので、その時に絶対に覚えておいてほしいコマンドだけまとめます。

cd コマンド

ディレクトリを移動します。

lsコマンド

ls -aコマンドで、隠しファイルを含めたディレクトリ全内容を表示します。

mkdirコマンド

ディレクトリを新規作成します。

rmコマンド

ファイルを削除します。

cpコマンド

ファイルをコピーします。

mvコマンド

ファイルの移動とファイル名の変更を行います。

cat コマンド

ファイルの中身を表示します




◆Gitはスナップショット？差分
⇒スナップショットを保存
　差分ではなく、ファイルを丸ごと保存してバージョン上げしている。
　⇒何故か？
　　複数人で開発する際に早く開発できる。ブランチ切る、マージも早くなる。
　
バージョンを記録しておくと
⇒以前の状態に戻すことができる


ローカルでスナップショットを記録⇒GitHubへアップ
ローカルレポジトリ：自分のPCの履歴データの保管場所
ワークツリー：自分の作業場


◆ローカル操作
リポジトリ　　スナップショットを記録　git commit
ステージ　　　git addコミットする変更を準備
ワークツリー　ファイルを変更


◆データの持ち方※※※
リポジトリ　　②git add 圧縮ファイルA(index.htmlのファイル内容を圧縮)　
　　　　　　　④ツリー１　⑤コミット１：ツリー1,製作者,日付,コミットメッセージ
ステージ　　　③index.html 圧縮ファイルA
ワークツリー　①index.html



Gitのデータ管理の補足
Gitのデータの管理の仕方について補足します。
動画資料では正確性よりイメージを掴んでもらうことを優先しています。ここではより正確に、どのようにGitがデータを管理しているのか見ていきます。
イメージがわかっていれば大丈夫だよという場合は飛ばしてください。

Gitオブジェクト

git addやgit commitした時、「圧縮ファイル」「ツリーファイル」「コミットファイル」が作成されることは前回の動画で見てきました
。Gitではこれらのファイルを「Gitオブジェクト」と呼んでいます。Gitオブジェクトは「.git / objects」ディレクトリの下に保存されます。

この3つのGitオブジェクトに関して、より詳しく解説します。

圧縮ファイル

正確には「blob（ブロブ）オブジェクト」と言います。blobというのは「カタマリ」という意味です。ファイルの中身を圧縮しただけのカタマリということになります。

圧縮ファイルのファイル名は動画では「圧縮ファイルA」と書いていましたが、実際はハッシュIDになります。
ハッシュIDというのは、ヘッダー（ファイル内容の文字数など、ファイルのメタ情報）とファイル内容を、SHA-1というハッシュ関数で40文字のフローチャートに変換したものです。ハッシュIDのうち、先頭2文字をディレクトリ名に、残り38文字をファイル名にして保存します。
圧縮ファイルは「.git / objects / af / 5626b4a114abcb82d63db7c8082c3c4756e51b」として保存されています。

ここで重要なことは、ハッシュIDというのは、ファイルの中身に対して一意になるということです。中身が同じファイルであれば必ず同じハッシュIDになります。そのため、ファイルの中身が同じであればgit addしても追加で圧縮ファイルが作られることはありませんし、ファイルの中身に変更があればgit addすると別の圧縮ファイルが作成されます。

ツリーファイル

圧縮ファイルは、ファイルの中身を圧縮したものを保存していて、圧縮ファイルのファイル名もファイルの中身をベースにハッシュ関数で作成されたものでした。つまり、圧縮ファイルにはもともとのファイル名の情報がどこにも残っていないことになります。

そこで、ファイル名とファイルの中身の組み合わせ（ファイル構造）を保存するためにあるのがツリーファイルでしたね。コミットをするとツリーファイルが作成されます。ツリーファイルは「treeオブジェクト」と言います。

ツリーファイルは動画で説明したことと実際のファイル構造に違いがあるため注意してください。
動画ではファイル名と圧縮ファイル名の組み合わせを保存したものとして説明しました。実際は、ディレクトリの一つの階層ごとに一つのツリーファイルになっていて、ツリーファイルには圧縮ファイルだけでなくツリーファイルも保存されています。

言葉ではわかりにくいので、具体的に見てみましょう。なお
、Gitオブジェクトの中身を確認するにはgit cat-file -p <オブジェクト名> （オブジェクト名はGit オブジェクトのハッシュ IDやブランチ名など。詳細は公式ドキュメントのSPECIFYING REVISIONSを参照）コマンドを使用します。


blogオブジェクトに関してはさっきと同じです。そこに、treeオブジェクト「60ac1b2d01e7f0c21178dcc2e767fb9a24d97124」のツリー名はsubdirだよ、というのが追加されています。

ここが注目ポイントで、ツリーファイルの中にツリーファイルが含まれているんですね。このように、ツリーファイルは一つのディレクトリに対応していて、ツリーファイルの中にツリーファイルと圧縮ファイルが含まれるようになっています。


コミットファイル

ツリーファイルが作成されたことで、ファイルの構造がわかるようになりました。しかしまだ、いつ、誰が、何を、何のために変更したのかということがわかりません。

そこで、その情報を保存するためにあるのがコミットファイルでした。コミットファイルは正確には「commitオブジェクト」と言います。

早速コミットファイルの中身を確認してみましょう。

まず、コミットした時点のツリー「acd75d1289b95787ecaab96c73fe1f3dbfa9cf67」が保存されています。これはこのプロジェクトの一番上のディレクトリのツリーファイルになります。一番上の階層のツリーをコミットファイルに保存することで、コミットした時点でのスナップショットを記録しています。

親コミットは「ae682f61f39b5c364781cb179035ae534c56a326」です。Gitはこのように親コミットを保存することでコミットの履歴をてれるようにしているんでね。

あとは作成者の名前とメールアドレス、改行、コミットメッセージと続きます。これで、変更者と変更理由がわかります。


